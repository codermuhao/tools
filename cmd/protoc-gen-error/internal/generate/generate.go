// Package generate generate
package generate

import (
	"fmt"

	"github.com/codermuhao/tools/cmd/protoc-gen-error/internal/util"

	options "github.com/codermuhao/tools/cmd/protoc-gen-error/reason"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

type gen struct {
	g    *protogen.Plugin
	pkgs []pkgImport
}

type pkgImport struct {
	url   string
	alias string
}

var SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

// NewGen create a gen instance
func NewGen(g *protogen.Plugin) *gen {
	return &gen{g: g, pkgs: []pkgImport{
		{url: "github.com/codermuhao/tools/xerrors"},
	}}
}

// File generate codes by proto file
func (g *gen) File(file *protogen.File, release string) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".pb.reason.go"
	gf := g.g.NewGeneratedFile(filename, file.GoImportPath)
	g.g.SupportedFeatures = SupportedFeatures
	gf.P("// Code generated by protoc-gen-error. DO NOT EDIT.")
	gf.P("// source: ", *file.Proto.Name)
	gf.P("// version: ", release)
	gf.P()
	gf.P("package ", file.GoPackageName)
	g.genImports(gf)
	gf.P()
	gf.P("var _ = xerrors.NewReasonError")
	for _, v := range file.Proto.GetEnumType() {
		ext := proto.GetExtension(v.GetOptions(), options.E_Enable)
		enable, ok := ext.(bool)
		if !ok {
			panic("enable field must a bool value")
		}
		if !enable {
			continue
		}
		for _, vv := range v.GetValue() {
			gf.P()
			ext1 := proto.GetExtension(vv.GetOptions(), options.E_Prefix)
			prefix, ok := ext1.(options.PrefixErrorReason)
			if !ok {
				panic("reason prefix is error")
			}
			gf.P("func Is" + util.Case2Camel(vv.GetName()) + "(err error) bool {")
			gf.P("e := xerrors.Parse(err)")
			if prefix > 0 {
				gf.P(fmt.Sprintf("return e.Reason == %#v+%s_%s.String()", prefix.String()+".",
					v.GetName(), vv.GetName()))
			} else {
				gf.P(fmt.Sprintf("return e.Reason == %s_%s.String()", v.GetName(), vv.GetName()))
			}
			gf.P("}")
			gf.P()
			gf.P(fmt.Sprintf("func New%s(format string, args ...interface{}) *xerrors.ReasonError {",
				util.Case2Camel(vv.GetName())))
			ext2 := proto.GetExtension(vv.GetOptions(), options.E_Message)
			message, ok := ext2.(string)
			if ok && len(message) > 0 {
				gf.P("if len(format) == 0 {")
				gf.P("format,args = \"" + message + "\", args[:0]")
				gf.P("}")
			}
			if prefix > 0 {
				gf.P(fmt.Sprintf("return xerrors.NewReasonErrorf(%#v+%s_%s.String(), format, args...)",
					prefix.String()+".", v.GetName(), vv.GetName()))
			} else {
				gf.P(fmt.Sprintf("return xerrors.NewReasonErrorf(%s_%s.String(), format, args...)",
					v.GetName(), vv.GetName()))
			}
			gf.P("}")
		}
	}
	gf.P()
	return gf
}

func (g *gen) genImports(gf *protogen.GeneratedFile) {
	gf.P("import (")
	for _, v := range g.pkgs {
		if len(v.alias) > 0 {
			gf.P(fmt.Sprintf("%s \"%s\"", v.alias, v.url))
		} else {
			gf.P(fmt.Sprintf("\"%s\"", v.url))
		}
	}
	gf.P(")")
}
